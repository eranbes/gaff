{"version":3,"sources":["components/Constants.js","components/Rest.js","components/Publishers.js","components/Publisher.js","components/Crawl.js","components/Reports.js","App.js","serviceWorker.js","index.js"],"names":["SERVER","Boolean","window","location","hostname","match","response","fetchPost","url","method","data","init","mode","cache","headers","body","JSON","stringify","fetch","then","res","status","ok","json","e","catch","error","Publishers","setRoute","setPublisherId","setPublisher","useState","publishers","setPublishers","newPublisher","setNewPublisher","loading","setLoading","useEffect","rest","Grid","container","style","marginBottom","direction","alignItems","component","Paper","item","Typography","variant","TextField","label","onChange","value","target","Button","color","margin","disabled","onClick","List","LinearProgress","map","p","ListItem","key","name","ListItemText","primary","ListItemSecondaryAction","padding","IconButton","edge","id","crawl","Publisher","publisher","selectedDomain","setSelectedDomain","newEntry","setNewEntry","newAssetName","setNewAssetName","newAssetId","setNewAssetId","newDomain","setNewDomain","domains","setDomains","newChildId","domain","i","assets","find","a","entries","newId","addEntry","is_app","prev","d","push","domain_id","deleteById","index","filter","handleDomain","field","fontSize","Box","border","spacing","xs","backgroundColor","publisher_id","ns_ads","ns_app_ads","alignSelf","length","FormControl","width","Select","MenuItem","fullWidth","console","log","asset_name","asset_id","marginTop","justify","FormControlLabel","control","Checkbox","checked","text","g","Crawl","setCrawl","renderCells","row","isApp","app_ads","ads","align","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","colSpan","scope","descendingComparator","b","orderBy","headCells","EnhancedTableHead","props","classes","order","onRequestSort","headCell","sortDirection","TableSortLabel","active","property","event","className","visuallyHidden","useToolbarStyles","makeStyles","theme","root","paddingLeft","paddingRight","title","flex","grid","useStyles","paper","table","minWidth","clip","height","overflow","position","top","Reports","rows","setRows","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","isFSO","setFSO","filterPublisher","setFilterPublisher","filterDomain","setFilterDomain","filterAsset","setFilterAsset","EnhancedTableToolbar","Toolbar","clsx","Tooltip","_","InputLabel","r","self","indexOf","concat","statuses","entriesRender","status_id","entry_name","secondary","created_at","updated_at","aria-labelledby","aria-label","rowCount","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","isNeedDisplay","slice","hover","tabIndex","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","App","route","publisherId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.13feeb5a.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport const SERVER = isLocalhost\n    ? 'http://127.0.0.1:8000'\n    : 'https://gaff.u0087004.plsk.regruhosting.ru'","import {SERVER} from './Constants';\n\nlet response = {};\n\n/**\n * @param {string} url\n * @param {string} method\n * @param {any} data\n */\nconst fetchPost = (url, method = 'GET', data = null) => {\n\n    let init = {\n        method,\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }\n    if (data) init.body = JSON.stringify(data);\n\n    return fetch(SERVER + '/' + url, init)\n        .then(res => {\n            response = {\n                status: res.status,\n                ok: res.ok\n            };\n            return res;\n        })\n        .then(res => {\n            try {\n                return res.json()\n            } catch (e) {\n                return null\n            }\n        })\n        .then(res => {\n            response.body = res;\n            return response;\n        })\n        .catch(error => {\n            if (!response.ok) response.error = error;\n            return response;\n        })\n\n};\n\nexport default fetchPost\n","import React, {useEffect, useState} from 'react';\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {Paper} from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FindInPageIcon from '@material-ui/icons/FindInPage';\n\nimport rest from './Rest'\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nexport const Publishers = ({setRoute, setPublisherId, setPublisher}) => {\n\n    const [publishers, setPublishers] = useState([])\n    const [newPublisher, setNewPublisher] = useState('')\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n\n        setLoading(true)\n\n        rest('publishers')\n            .then(res => {\n\n                setLoading(false)\n\n                if (res.status === 200) setPublishers(res.body)\n\n            })\n\n    }, [])\n\n    const handleNewPublisher = value => {\n        setNewPublisher(value)\n    }\n\n    const addPublisher = () => {\n\n        if (!newPublisher || loading) return;\n\n        setLoading(true)\n\n        rest('publishers', \"POST\", {newPublisher})\n            .then(res => {\n\n                setLoading(false)\n\n                if (res.status === 201) {\n                    setPublishers(res.body)\n                    setNewPublisher('')\n                }\n\n            })\n\n    }\n\n    const editPublisher = id => {\n\n        setPublisherId(id);\n        setRoute('publisher')\n\n    }\n\n    const crawl = p => {\n\n        setPublisher(p);\n        setRoute('crawl')\n\n    }\n\n    return <Grid container\n                 style={{marginBottom: '1rem'}}\n                 direction={\"column\"} alignItems={\"center\"} component={Paper}>\n\n        <Grid item>\n            <Typography variant={\"h5\"}>Publishers</Typography>\n        </Grid>\n        <Grid item>\n\n            <TextField label=\"New publisher\"\n                       onChange={e => handleNewPublisher(e.target.value)}\n                       value={newPublisher}/>\n\n            <Button variant=\"contained\" color=\"primary\"\n                    style={{margin: '1rem'}}\n                    disabled={newPublisher === '' || loading}\n                    onClick={() => addPublisher()}\n            >\n                add publisher\n            </Button>\n\n            <List>\n                {loading\n                    ? <LinearProgress/>\n                    : null}\n                {publishers.map(p => <ListItem key={'listpublisherskey' + p.name}>\n                        <ListItemText\n                            primary={p.name}\n                        />\n                        <ListItemSecondaryAction\n                            style={{padding: '1rem'}}\n                        >\n                            <IconButton edge=\"end\"\n                                        onClick={() => editPublisher(p.id)}\n                            >\n                                <EditIcon/>\n                            </IconButton>\n\n                            <IconButton edge=\"end\"\n                                        onClick={() => crawl(p)}\n                            >\n                                <FindInPageIcon/>\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )}\n            </List>\n\n        </Grid>\n\n        <Button variant=\"contained\"\n                color=\"primary\"\n                style={{margin: '1rem'}}\n                onClick={() => setRoute('reports')}\n        >\n            reports\n        </Button>\n    </Grid>\n\n}","import React, {useState, useEffect} from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport rest from './Rest'\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from \"@material-ui/core/Typography\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Box from \"@material-ui/core/Box\";\n\n\nexport const Publisher = ({setRoute, id}) => {\n\n    const [publisher, setPublisher] = useState(null)\n\n    const [selectedDomain, setSelectedDomain] = useState(0)\n    const [newEntry, setNewEntry] = useState('')\n    const [newAssetName, setNewAssetName] = useState('')\n    const [newAssetId, setNewAssetId] = useState('')\n\n    const [newDomain, setNewDomain] = useState('')\n    const [domains, setDomains] = useState([])\n\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n\n        if (+id > 0) {\n\n            setLoading(true)\n\n            rest('publishers/' + id)\n                .then(res => {\n\n                    setLoading(false)\n\n                    if (res.status === 200) {\n                        setPublisher(res.body.name)\n                        setDomains(res.body.domains)\n                    }\n\n                })\n        }\n\n    }, [id])\n\n    const newChildId = (domain) => {\n\n        for (let i = 1; i < 100000; i++) {\n\n            if (!(domain.assets.find(a => a.id === i) || domain.entries.find(e => e.id === i))) {\n                return i\n            }\n\n        }\n\n    }\n\n    const newId = () => {\n\n        for (let i = 1; i < 100000; i++) {\n\n            if (!domains.find(e => e.id === i)) return i\n\n        }\n\n    }\n\n    const addAsset = () => {\n\n        setDomains(prev => prev.map(d => {\n\n            if (d.id === selectedDomain) {\n\n                console.log(d)\n\n                if (!d.assets.find(a => a.asset_name === newAssetName && a.asset_id === newAssetId)) {\n\n                    d.assets.push({\n                        id: newChildId(d),\n                        asset_name: newAssetName,\n                        asset_id: newAssetId,\n                        domain_id: selectedDomain,\n                    })\n\n                    setNewAssetName('')\n                    setNewAssetId('')\n\n                }\n\n            }\n\n            return d\n\n        }))\n\n    }\n\n    const addEntry = (is_app = false) => {\n\n        setDomains(prev => prev.map(d => {\n\n            if (d.id === selectedDomain) {\n\n                if (!d.entries.find(e => e.name === newEntry && is_app === e.is_app)) {\n\n                    d.entries.push({\n                        id: newChildId(d),\n                        name: newEntry,\n                        domain_id: selectedDomain,\n                        is_app\n                    })\n\n                    setNewEntry('')\n\n                }\n\n            }\n\n            return d\n\n        }))\n\n    }\n\n    const deleteById = (domain_id, index, id) => {\n\n        setDomains(prev => prev.map(d => {\n\n            if (d.id === domain_id) {\n                d[index] = d[index].filter(a => a.id !== id)\n            }\n\n            return d\n\n        }))\n\n    }\n\n    const addDomain = () => {\n\n        setDomains(prev => {\n\n            let name = newDomain\n\n            prev.push({\n                id: newId(),\n                name,\n                publisher_id: id,\n                assets: [],\n                entries: [],\n                ns_ads: false,\n                ns_app_ads: true\n            })\n\n            return prev\n\n        })\n\n        setNewDomain('')\n\n    }\n\n    const handleDomain = (id, field, value) => {\n\n        setDomains(domains.map(d => {\n\n            if (d.id === id) {\n                d[field] = value;\n            }\n\n            return d\n\n        }))\n\n    }\n\n    const savePublisher = () => {\n\n        setLoading(true)\n\n        rest('publishers/' + id, 'PUT', {\n            name: publisher,\n            domains\n        })\n            .then(res => {\n\n                setLoading(false)\n\n                if (res.status === 200) {\n                    setPublisher(res.body.name)\n                    setDomains(res.body.domains)\n                }\n\n            })\n\n    }\n\n    return publisher === null\n        ? <LinearProgress/>\n        : <>\n            <Grid container\n                  direction=\"column\"\n            >\n\n                <Grid item\n                      style={{margin: '1rem'}}\n                >\n                    <span style={{\n                        fontSize: '2rem',\n                        margin: '1rem',\n                    }}>\n                        Publisher:\n                    </span>\n                    <TextField variant=\"outlined\"\n                               onChange={e => setPublisher(e.target.value)}\n                               value={publisher}\n                    />\n                </Grid>\n                Domains\n                <Grid item>\n                    <Box border={2}>\n                        <Grid container\n                              spacing={2}\n                        >\n                            <Grid item xs={5}\n                                  style={{margin: '1rem'}}\n                            >\n                                <TextField label=\"Add new domain\"\n                                           variant=\"outlined\"\n                                           onChange={e => setNewDomain(e.target.value)}\n                                           value={newDomain}/>\n\n                                <Button variant=\"contained\"\n                                        color=\"primary\"\n                                        style={{\n                                            margin: '1rem',\n                                            backgroundColor: \"#085394\"\n                                        }}\n                                        onClick={() => addDomain()}\n                                        disabled={newDomain === ''}\n                                >\n                                    add domain\n                                </Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                {\"Domains for \" + publisher}\n                                <Box border={1}\n                                     style={{\n                                         margin: '1rem',\n                                         alignSelf: 'center'\n                                     }}\n                                >\n                                    <List>\n                                        {domains.map(d => <ListItem key={\"listdonmjsbidgv\" + d.id}>\n                                            <ListItemText\n                                                primary={d.name}\n                                            />\n                                        </ListItem>)}\n                                    </List>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Grid>\n\n                {domains.length > 0\n                    ? <Grid>\n                        ads.txt/app-ads.txt/assets\n                        <Box border={2}>\n                            <Grid container\n                                  direction=\"column\"\n                                  style={{margin: '1rem'}}\n                                  spacing={2}\n                            >\n                                <Grid item>\n                                    <FormControl\n                                        variant=\"outlined\"\n                                        style={{width: '50%'}}\n                                    >\n                                        {/*<InputLabel>Select Domain To Attach To</InputLabel>*/}\n                                        <Select\n                                            value={selectedDomain}\n                                            onChange={e => setSelectedDomain(e.target.value)}\n                                        >\n                                            <MenuItem value={0}>Select Domain To Attach To</MenuItem>\n                                            {domains.map(d => <MenuItem\n                                                value={d.id}\n                                                key={'selecteddomainskeycewvv' + d.id}\n                                            >{d.name}</MenuItem>)}\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n\n                                <Grid item>\n                                    <Grid container>\n                                        <Grid item xs={4}>\n                                            <TextField label=\"Your txt Entry\"\n                                                       variant=\"outlined\"\n                                                       fullWidth\n                                                       onChange={e => setNewEntry(e.target.value)}\n                                                       value={newEntry}/>\n                                        </Grid>\n\n                                        <Grid item>\n                                            <Button variant=\"contained\" color=\"primary\"\n                                                    style={{\n                                                        margin: '1rem',\n                                                        backgroundColor: \"#009E0F\"\n                                                    }}\n                                                    disabled={newEntry === '' || !selectedDomain}\n                                                    onClick={() => addEntry()}\n                                            >\n                                                add to ads.txt\n                                            </Button>\n                                        </Grid>\n\n                                        <Grid item>\n                                            <Button variant=\"contained\" color=\"primary\"\n                                                    style={{\n                                                        margin: '1rem',\n                                                        backgroundColor: \"#009E0F\"\n                                                    }}\n                                                    disabled={newEntry === '' || !selectedDomain}\n                                                    onClick={() => addEntry(true)}\n                                            >\n                                                add to app-ads.txt\n                                            </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </Grid>\n\n                                <Grid item>\n\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={4}>\n                                            <TextField label=\"Asset Name\"\n                                                       variant=\"outlined\"\n                                                       fullWidth\n                                                       onChange={e => setNewAssetName(e.target.value)}\n                                                       value={newAssetName}/>\n                                        </Grid>\n\n                                        <Grid item xs={4}>\n                                            <TextField label=\"Asset ID\"\n                                                       variant=\"outlined\"\n                                                       fullWidth\n                                                       onChange={e => setNewAssetId(e.target.value)}\n                                                       value={newAssetId}/>\n                                        </Grid>\n\n                                        <Grid item>\n                                            <Button variant=\"contained\"\n                                                    color=\"primary\"\n                                                    style={{\n                                                        margin: '1rem',\n                                                        backgroundColor: \"#9900ff\"\n                                                    }}\n                                                    disabled={!newAssetName || !newAssetId || !selectedDomain}\n                                                    onClick={() => addAsset()}\n                                            >\n                                                add to assets\n                                            </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n\n                    </Grid>\n                    : null}\n\n                {domains.map(d => <Grid\n                    key={'listdomainskey' + d.id}\n                    style={{marginTop: '1rem'}}>\n                    <Box border={2}\n                         style={{\n                             backgroundColor: \"#B2D4E5\"\n                         }}\n                    >\n                        <Grid container justify=\"space-around\">\n                            <Grid item xs={2}\n                                  style={{margin: '1rem'}}\n                            >\n                                <Typography variant={\"h6\"}>Domain</Typography>\n                                <TextField\n                                    onChange={e => handleDomain(d.id, 'name', e.target.value)}\n                                    value={d.name}\n                                    // style={{marginRight: '1rem'}}\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox\n                                        checked={!!d.ns_ads}\n                                        onChange={e => handleDomain(d.id, 'ns_ads', e.target.checked)}\n                                    />}\n                                    label=\"ads.txt\"\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox\n                                        checked={!!d.ns_app_ads}\n                                        onChange={e => handleDomain(d.id, 'ns_app_ads', e.target.checked)}\n                                    />}\n                                    label=\"app-ads.txt\"\n                                />\n\n                            </Grid>\n                            <Grid item xs={4}\n                                  style={{margin: '1rem'}}\n                            >\n                                <Typography variant={\"h6\"}>Assets</Typography>\n\n                                {typeof d.assets === 'object' && d.assets.length > 0\n                                    ?\n                                    <List>\n                                        {d.assets.map(a => <ListItem\n                                            key={\"listitforassetscildioubrgrgv\" + a.id}\n                                        >\n                                            <ListItemText\n                                                primary={a.asset_name + ' ' + a.asset_id}\n                                            />\n                                            <IconButton edge=\"end\"\n                                                        onClick={() => deleteById(d.id, 'assets', a.id)}\n                                            >\n                                                <DeleteIcon/>\n                                            </IconButton>\n                                        </ListItem>)}\n                                    </List>\n                                    : null}\n\n                            </Grid>\n\n                            <Grid item xs={5}\n                                  style={{margin: '1rem'}}\n                            >\n                                {typeof d.entries === 'object' && d.entries.length > 0\n                                    ? [\n                                        {text: 'ads.txt', is_app: false},\n                                        {text: 'app-ads.txt', is_app: true},\n                                    ].map(g => <List\n                                            key={\"jgicgjqhcvucgi31\" + g.text}\n                                        >\n                                            <Typography variant={\"h6\"}>{g.text}</Typography>\n                                            {d.entries.filter(e => e.is_app === g.is_app && d.id === e.domain_id)\n                                                .map(e => <ListItem key={'listentrfewfcsdkey' + e.name + e.id}>\n                                                        <ListItemText\n                                                            primary={e.name}\n                                                        />\n                                                        <ListItemSecondaryAction>\n                                                            <IconButton edge=\"end\"\n                                                                        onClick={() => deleteById(d.id, 'entries', e.id)}\n                                                            >\n                                                                <DeleteIcon/>\n                                                            </IconButton>\n                                                        </ListItemSecondaryAction>\n                                                    </ListItem>\n                                                )}\n                                        </List>\n                                    )\n                                    : null}\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Grid>)}\n\n            </Grid>\n\n            {loading\n                ? <LinearProgress/>\n                : <Grid container\n                        justify=\"space-around\"\n                        style={{margin: '1rem'}}\n                >\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{margin: '1rem'}}\n                        onClick={() => setRoute('publishers')}\n                    >\n                        cancel\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{margin: '1rem'}}\n                        onClick={() => savePublisher()}\n                        disabled={!publisher || !!domains.find(d => !d.name)}\n                    >\n                        save\n                    </Button>\n\n                </Grid>}\n\n        </>\n\n}","import React, {useEffect, useState} from \"react\";\nimport rest from \"./Rest\";\nimport {Paper} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const Crawl = ({setRoute, publisher}) => {\n\n    const [crawl, setCrawl] = useState([])\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n\n        setLoading(true)\n\n        rest('crawls/' + publisher.id, 'PATCH')\n            .then(res => {\n\n                setLoading(false)\n\n                if (res.status === 200) {\n                    setCrawl(res.body)\n                }\n\n            })\n\n    }, [publisher])\n\n    const renderCells = (row, isApp) => {\n\n        return isApp\n            ? row.ns_app_ads && row.entries.length > 0\n                ? row.app_ads\n                    ? 'parsed'\n                    : 'not exist'\n                : 'no need'\n            : row.ns_ads && row.entries.length > 0\n                ? row.ads\n                    ? 'parsed'\n                    : 'not exist'\n                : 'no need'\n\n    }\n\n    return <>\n\n        <Typography variant=\"h4\"\n                    align=\"center\"\n                    style={{\n                        margin: '1rem'\n                    }}\n        >\n            Publisher: {publisher.name}\n        </Typography>\n\n        <TableContainer component={Paper}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Domains</TableCell>\n                        <TableCell align=\"center\">ads.txt</TableCell>\n                        <TableCell align=\"center\">app-ads.txt</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {loading\n                        ? <TableRow>\n                            <TableCell colSpan={3}>\n                                <LinearProgress/>\n                            </TableCell>\n                        </TableRow>\n                        : crawl.map(d => <TableRow key={\"keyfowdomainscrawlqerv\" + d.name}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    <Typography variant=\"h6\">\n                                        {d.name}\n                                    </Typography>\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                    {renderCells(d, false)}\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                    {renderCells(d, true)}\n                                </TableCell>\n                            </TableRow>\n                        )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n\n        <Button\n            variant=\"contained\"\n            style={{margin: '1rem'}}\n            onClick={() => setRoute('publishers')}\n        >\n            back\n        </Button>\n    </>\n}","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport rest from \"./Rest\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport {Grid} from \"@material-ui/core\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@material-ui/core/Button\";\n\n\nfunction descendingComparator(a, b, orderBy) {\n\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n\n}\n\nfunction getComparator(order, orderBy) {\n\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n\n        return order === 0\n            ? a[1] - b[1]\n            : order\n\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    {id: 'publisher', label: 'Publisher'},\n    {id: 'name', label: 'Domain'},\n    {id: 'assets', label: 'assets name'},\n    {id: 'app_ads', label: 'app-ads.txt entries'},\n    {id: 'ads', label: 'ads.txt entries'},\n];\n\nfunction EnhancedTableHead(props) {\n    const {classes, order, orderBy, onRequestSort} = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={\"keyfortablehead;oitv\" + headCell.label}\n                        align={headCell.label === 'Publisher' ? 'left' : 'center'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id\n                                ? <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n                                : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    title: {\n        flex: '1 1 100%',\n    },\n    grid: {\n        margin: '1rem'\n    }\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport const Reports = ({setRoute}) => {\n\n    const classes = useStyles();\n    const [rows, setRows] = useState([]);\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('publisher');\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [loading, setLoading] = useState(false)\n    const [isFSO, setFSO] = useState(false)\n    const [filterPublisher, setFilterPublisher] = useState('')\n    const [filterDomain, setFilterDomain] = useState('')\n    const [filterAsset, setFilterAsset] = useState('')\n\n\n    useEffect(() => {\n\n        setLoading(true)\n\n        rest('crawls')\n            .then(res => {\n\n                setLoading(false)\n\n                if (res.status === 200) {\n\n                    setRows(res.body)\n\n                    // console.log(res.body)\n\n                }\n\n            })\n\n    }, [])\n\n    const EnhancedTableToolbar = () => {\n        const classes = useToolbarStyles();\n\n        return <>\n\n            <Toolbar\n                className={clsx(classes.root)}\n            >\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Reports\n                </Typography>\n\n                <Tooltip title=\"Filter list\">\n                    <IconButton\n                        onClick={_ => setFSO(!isFSO)}\n                    >\n                        <FilterListIcon/>\n                    </IconButton>\n                </Tooltip>\n            </Toolbar>\n\n            {isFSO\n                ? <Grid\n                    container\n                    className={(classes.grid)}\n                    spacing={1}\n                >\n                    <Grid item xs={4}>\n                        <FormControl fullWidth>\n                            <InputLabel>Select publisher...</InputLabel>\n\n                            <Select\n                                fullWidth\n                                value={filterPublisher}\n                                onChange={e => setFilterPublisher(e.target.value)}\n                            >\n                                <MenuItem value={''}>None</MenuItem>\n                                {rows.map(r => r.publisher)\n                                    .filter((p, i, self) => self.indexOf(p) === i)\n                                    .map(p => <MenuItem value={p} key={\"hcbehvsjehcve\" + p}>\n                                        {p}\n                                    </MenuItem>)}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl fullWidth>\n                            <InputLabel>Select domain...</InputLabel>\n\n                            <Select\n                                fullWidth\n                                value={filterDomain}\n                                onChange={e => setFilterDomain(e.target.value)}\n                            >\n                                <MenuItem value={''}>None</MenuItem>\n                                {rows.map(r => r.name)\n                                    .filter((d, i, self) => self.indexOf(d) === i)\n                                    .map(d => <MenuItem value={d} key={\"uiqgdiquhweiwcvj\" + d}>\n                                        {d}\n                                    </MenuItem>)}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={3}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"demo-simple-select-helper-label\">Select asset...</InputLabel>\n                            <Select\n                                fullWidth\n                                value={filterAsset}\n                                onChange={e => setFilterAsset(e.target.value)}\n                            >\n                                <MenuItem value={''}>None</MenuItem>\n                                <MenuItem value={'not exists'}>Not exists</MenuItem>\n                                {[].concat(...rows.map(r => r.assets)\n                                    .filter(a => a.length > 0)\n                                    .map(a => a.map(a => a.asset_name)))\n                                    .filter((a, i, self) => self.indexOf(a) === i)\n                                    .map(a => <MenuItem value={a} key={\"ecgnqweixqguyqgnq\" + a}>\n                                        {a}\n                                    </MenuItem>)}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n                : null\n            }\n\n        </>\n    };\n\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const statuses = [\n        {name: 'UNAVAILABLE', color: 'grey'},\n        {name: 'ADDED', color: 'green'},\n        {name: 'DELETED', color: 'red'},\n    ]\n\n    const isNeedDisplay = row => {\n\n        if (filterPublisher && filterPublisher !== row.publisher) return false\n\n        if (filterDomain && filterDomain !== row.name) return false\n\n        if (filterAsset) {\n\n            if (filterAsset === 'not exists' && row.assets.length === 0) {\n\n                return true\n\n            }\n\n            return Boolean(row.assets.find(a => filterAsset === a.asset_name))\n\n        }\n\n        return true\n\n    }\n\n    const assetsRender = value => value.length === 0\n        ? 'not exists'\n        : <List>\n            {value.map(a => <ListItem key={\"assetskeyfowqerg\" + a.id}>\n                {a.asset_name}\n            </ListItem>)}\n        </List>\n\n    const entriesRender = value => {\n\n        if (value.length === 0) return 'N/A'\n\n        return <List>\n            {value.map(e => {\n\n                let status = statuses[e.status_id]\n\n                return <ListItem\n                    key={\"entrieskeyforcriwuerbkver\" + e.id}\n                    style={{\n                        backgroundColor: status.color,\n                        color: 'white',\n                        margin: 0,\n                        padding: 0,\n                    }}\n                >\n                    <ListItemText\n                        primary={e.entry_name}\n                        secondary={status.name + \", add: \" + e.created_at + \", upd: \" + e.updated_at}\n                    />\n                </ListItem>\n            })}\n        </List>\n\n    }\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar/>\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {loading\n                                ? <TableRow>\n                                    <TableCell colSpan={5}>\n                                        <LinearProgress/>\n                                    </TableCell>\n                                </TableRow>\n                                : stableSort(rows, getComparator(order, orderBy))\n                                    .filter(row => isNeedDisplay(row))\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                    .map(row => <TableRow\n                                            hover\n                                            tabIndex={-1}\n                                            key={row.name}\n                                        >\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {row.publisher}\n                                            </TableCell>\n                                            <TableCell align=\"center\">{row.name}</TableCell>\n                                            <TableCell align=\"center\">{assetsRender(row.assets)}</TableCell>\n                                            <TableCell align=\"center\">{entriesRender(row.app_ads)}</TableCell>\n                                            <TableCell align=\"center\">{entriesRender(row.ads)}</TableCell>\n                                        </TableRow>\n                                    )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 20, 30]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n\n            <Button\n                variant=\"contained\"\n                style={{margin: '1rem'}}\n                onClick={() => setRoute('publishers')}\n            >\n                back\n            </Button>\n\n        </div>\n    );\n}\n","import React, {useState} from 'react';\nimport {Publishers} from \"./components/Publishers\";\nimport {Publisher} from \"./components/Publisher\";\nimport {Crawl} from \"./components/Crawl\";\nimport {Reports} from \"./components/Reports\";\n\nfunction App() {\n\n    const [route, setRoute] = useState('publishers');\n    const [publisherId, setPublisherId] = useState(0);\n    const [publisher, setPublisher] = useState([]);\n\n    return route === 'publishers'\n        ? <Publishers setRoute={setRoute} setPublisherId={setPublisherId} setPublisher={setPublisher}/>\n        : route === 'publisher'\n            ? <Publisher setRoute={setRoute} id={publisherId}/>\n            : route === 'crawl'\n                ? <Crawl setRoute={setRoute} publisher={publisher}/>\n                : route === 'reports'\n                    ? <Reports setRoute={setRoute}/>\n                    : null\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}